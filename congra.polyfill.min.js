const ConGraCSSParser=function(){const t="--cg",o=8,s="",e=null;function n(t,o){switch(o){case"deg":return Number.parseFloat(t)/360;case"%":return Number.parseFloat(t)/100;case"turn":return Number.parseFloat(t);default:throw"failed to normalize unit"}}function r(t,o){try{return n(t,o)}catch(t){throw"failed to normalize stop offset"}}function a(t){const o={angle:0,position:[.5,.5],stops:[],isRepeat:!1};let s;{const e=t.match(/(repeating-)*conic-gradient\(([\s\S]+)\)/m);if(null===e)throw'failed to parse "conic-gradient()" pattern';if(!function(t){let o=0;for(const s of t)"("===s?o+=1:")"===s&&(o-=1);return 0===o}(e[2]))throw'failed to parse "conic-gradient()" pattern; braces not match';o.isRepeat=Boolean(e[1]),s=e[2]}{const t=s.match(/(from\s+?(.+?)(turn|deg|%))*\s*(at\s+([^\s]+)%\s+([^\s]+)%)*\s*,\s*([\s\S]*)$/m);if(null===t)throw"failed to parse definition";if(null===t[7])throw"color stop list is empty";t[1]&&t[2]&&t[3]&&(o.angle=function(t,o){try{return n(t,o)}catch(t){throw"failed to normalize angle"}}(t[2],t[3])),t[4]&&(void 0!==t[5]&&(o.position[0]=Number.parseFloat(t[5])/100),void 0!==t[6]&&(o.position[1]=Number.parseFloat(t[6])/100)),o.stops=function(t){const o=t.match(/rgba\(([\s\S]+?)\)(\s+[^,\s]+)*/g);if(null===o)throw"failed to parse color stop list";let s=[];for(const t of o){const o=t.match(/rgba\(\s*([^,]+)\s*,*\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^,]+)\s*\)\s*(([^\s]+)(deg|turn|%))*/m),e=[o[1]/255,o[2]/255,o[3]/255,o[4]],n=o[5]?r(o[6],o[7]):NaN;s.push({color:e,offset:n})}let e=[],n=0;for(const t of s)Number.isNaN(t.offset)?e.push(t):t.offset>=n&&(e.push(t),n=t.offset);for(const[t,o]of e.entries())if(Number.isNaN(o.offset)){if(0===t){o.offset=0;continue}if(t===e.length-1){o.offset=1;continue}o.offset=e[t-1].offset+.5*(e[t+1].offset-e[t-1].offset)}return e}(t[7])}return o}return{parse:function({prefix:n=t,maxImage:r=o,suffix:i=s,root:f=e}={}){null===f&&(f=document.body);const c=function({root:t,prefix:o,maxImage:s}){const e=[];t.style.setProperty("--cgAllow","yes");const n=Array.from(t.querySelectorAll("*"));n.unshift(t);for(const t of n){const n=getComputedStyle(t);if("yes"!==n.getPropertyValue("--cgAllow").trim().toLowerCase())continue;const r={elm:t,cssStringDataList:[],cgDataList:[]};for(const t of Array(s).keys()){const s=t+1,e=`${o}${s}`,a=n.getPropertyValue(e).trim();a.length&&r.cssStringDataList.push({cssIndex:s,cssString:a,customPropName:e})}r.cssStringDataList.length>0&&e.push(r)}for(const t of e)for(const{cssString:o}of t.cssStringDataList){const s=a(o);t.cgDataList.push(s)}return e}({root:f,prefix:n,maxImage:r});for(const t of c){const o=t.elm,{width:s,height:e}=o.getBoundingClientRect();let n=0;for(const o of t.cgDataList){let t;(t=o.isRepeat?o.stops.length:1!=o.stops[o.stops.length-1].offset?o.stops.length+1:o.stops.length)>n&&(n=t)}const r=ConGra({width:s,height:e,maxStops:n,twgl:twgl});for(const[s,e]of t.cgDataList.entries())r.render([e]),r.toURL().then(e=>{const{customPropName:n}=t.cssStringDataList[s];o.style.setProperty(`${n}${i}`,`url(${e})`)})}}}}();window.addEventListener("DOMContentLoaded",t=>{ConGraCSSParser.parse({prefix:"--cg",maxImages:16,suffix:""})});